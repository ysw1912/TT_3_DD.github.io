<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C/C&#43;&#43; on Hide on bush</title>
    <link>https://ysw1912.github.io/tags/c/c&#43;&#43;/</link>
    <description>Recent content in C/C&#43;&#43; on Hide on bush</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>ysw1912</copyright>
    <lastBuildDate>Thu, 11 Jul 2019 09:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://ysw1912.github.io/tags/c/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GFlags使用</title>
      <link>https://ysw1912.github.io/post/cc&#43;&#43;/gflags/</link>
      <pubDate>Thu, 11 Jul 2019 09:00:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/cc&#43;&#43;/gflags/</guid>
      <description>GFlags &amp;emsp;&amp;emsp;GFlags 是 Google 开源的一个命令行 flag 库。与 getopt 之类不同，flag 的定义可以散布在各个源码中，而不用放在一起。一个源码文件可以定义一些它自己的flag，链</description>
    </item>
    
    <item>
      <title>POSIX thread</title>
      <link>https://ysw1912.github.io/post/cc&#43;&#43;/pthread/</link>
      <pubDate>Sun, 15 Jul 2018 08:00:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/cc&#43;&#43;/pthread/</guid>
      <description>&amp;emsp;&amp;emsp;《APUE》这本书算是个字典了，本文算是对 pthread 的一些总结，主要是对原书中几段代码的解释说明，在读代码中记录知识点，技术</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 对象模型</title>
      <link>https://ysw1912.github.io/post/cc&#43;&#43;/cpp_object_model/</link>
      <pubDate>Thu, 12 Jul 2018 16:00:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/cc&#43;&#43;/cpp_object_model/</guid>
      <description>&amp;emsp;&amp;emsp;本文是看《深度探索 C++ 对象模型》这本书后的一些总结，并非单纯的摘录，而是结合相关博客和自己的理解所写的心得，有一定参考</description>
    </item>
    
    <item>
      <title>stringstream 类型转换</title>
      <link>https://ysw1912.github.io/post/cc&#43;&#43;/cpp04/</link>
      <pubDate>Fri, 15 Jun 2018 10:00:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/cc&#43;&#43;/cpp04/</guid>
      <description>sprintf() &amp;emsp;&amp;emsp;使用stdio.h的sprintf()可以实现数据的类型转换。 1 2 3 4 5 6 char s[5]; memset(s, 0, sizeof(s)); double d = 3.14; sprintf(s, &amp;#34;%f&amp;#34;, d); cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; endl; // print &amp;#34;3.140000&amp;#34;</description>
    </item>
    
    <item>
      <title>内存问题</title>
      <link>https://ysw1912.github.io/post/cc&#43;&#43;/cpp03/</link>
      <pubDate>Thu, 14 Jun 2018 19:45:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/cc&#43;&#43;/cpp03/</guid>
      <description>【转】应用 Valgrind 发现 Linux 程序的内存问题</description>
    </item>
    
    <item>
      <title>链表排序</title>
      <link>https://ysw1912.github.io/post/cc&#43;&#43;/stl02/</link>
      <pubDate>Thu, 14 Jun 2018 18:00:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/cc&#43;&#43;/stl02/</guid>
      <description>链表排序 &amp;emsp;&amp;emsp;在学习STL中的双向链表std::list时，被它的sort()函数惊艳到，发现《STL源码剖析》一书中对该</description>
    </item>
    
    <item>
      <title>红黑树删除节点</title>
      <link>https://ysw1912.github.io/post/cc&#43;&#43;/rbtree_delete/</link>
      <pubDate>Thu, 07 Jun 2018 10:00:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/cc&#43;&#43;/rbtree_delete/</guid>
      <description>红黑树 &amp;ensp;&amp;ensp;红黑树是一种自平衡的二叉查找树（BST），可在O(logN)时间内完成查找、插入、删除等操作。 &amp;ensp;&amp;e</description>
    </item>
    
    <item>
      <title>Effective C&#43;&#43; 笔记</title>
      <link>https://ysw1912.github.io/post/cc&#43;&#43;/effective_cpp_note/</link>
      <pubDate>Tue, 05 Jun 2018 10:00:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/cc&#43;&#43;/effective_cpp_note/</guid>
      <description>条款2：尽量以 const，enum，inline 替换 #define 对于单纯常量，尽量以const对象或enum替换#define。 enum是一个右值，无</description>
    </item>
    
    <item>
      <title>const和static</title>
      <link>https://ysw1912.github.io/post/cc&#43;&#43;/cpp01/</link>
      <pubDate>Tue, 05 Jun 2018 10:00:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/cc&#43;&#43;/cpp01/</guid>
      <description>pointer与const 1 2 3 4 5 6 char s[] = &amp;#34;Hello&amp;#34;; const char* p = s; // 非const指针，const数据（底层const：星号左边） char const* p = s; // 同上，co</description>
    </item>
    
  </channel>
</rss>