<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hide on bush</title>
    <link>https://ysw1912.github.io/post/</link>
    <description>Recent content in Posts on Hide on bush</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>ysw1912</copyright>
    <lastBuildDate>Tue, 20 Nov 2018 19:28:00 +0800</lastBuildDate>
    
	<atom:link href="https://ysw1912.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Win10&#43;VS2017配置OpenGL开发环境（GLFW&#43;GLAD）</title>
      <link>https://ysw1912.github.io/post/opengl/opengl01/</link>
      <pubDate>Tue, 20 Nov 2018 19:28:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/opengl/opengl01/</guid>
      <description>GLFW &amp;emsp;&amp;emsp;**GLFW **是一个专门针对 OpenGL 的 C 语言库，它允许用户创建 OpenGL 上下文并显示窗口，它提供了一些渲染物体所需的最低限度的接口。其用来代替之前的 GLUT 库。 配置步</description>
    </item>
    
    <item>
      <title>2D凸包问题</title>
      <link>https://ysw1912.github.io/post/algorithm/2d_convex_hull/</link>
      <pubDate>Tue, 20 Nov 2018 11:00:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/algorithm/2d_convex_hull/</guid>
      <description>MathJax.Hub.Config({ tex2jax: { inlineMath: [ [&#39;$&#39;,&#39;$&#39;], [&#34;\\(&#34;,&#34;\\)&#34;] ], processEscapes: true } }); 凸包 &amp;emsp;&amp;emsp;凸包（Convex Hull）是一个计算几何（图形学）中的概念。点集Q的凸包是指一个最小凸</description>
    </item>
    
    <item>
      <title>TCP 网络编程三部曲</title>
      <link>https://ysw1912.github.io/post/network/trilogy_of_tcp_programming/</link>
      <pubDate>Fri, 17 Aug 2018 20:10:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/network/trilogy_of_tcp_programming/</guid>
      <description>SO_REUSEADDR &amp;emsp;&amp;emsp;允许 TCP server crash/kill 后复用端口，立即重启。 &amp;emsp;&amp;emsp;传统的 fork-per-connection 模型需要使用，fork 出的子进程后，父进程的 listen 退出</description>
    </item>
    
    <item>
      <title>如何正确关闭TCP连接</title>
      <link>https://ysw1912.github.io/post/network/how_to_close_tcp_connection_correctly/</link>
      <pubDate>Fri, 17 Aug 2018 17:35:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/network/how_to_close_tcp_connection_correctly/</guid>
      <description>问题 &amp;emsp;&amp;emsp;在使用 TCP 网络编程时，有时发送了一些数据后，要传输的数据的最后几 kb，有时是几 Mb 没有到达。 &amp;emsp;&amp;emsp;</description>
    </item>
    
    <item>
      <title>三种I/O多路复用模型</title>
      <link>https://ysw1912.github.io/post/network/multiplex/</link>
      <pubDate>Wed, 15 Aug 2018 14:30:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/network/multiplex/</guid>
      <description>I/O多路复用 &amp;emsp;&amp;emsp;常见的 I/O 模型有 5 种： 阻塞 I/O 非阻塞 I/O I/O复用 信号驱动 I/O 异步 I/O &amp;emsp;&amp;emsp;其中，I/O 复用是</description>
    </item>
    
    <item>
      <title>POSIX thread</title>
      <link>https://ysw1912.github.io/post/cc&#43;&#43;/pthread/</link>
      <pubDate>Sun, 15 Jul 2018 08:00:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/cc&#43;&#43;/pthread/</guid>
      <description>&amp;emsp;&amp;emsp;《APUE》这本书算是个字典了，本文算是对 pthread 的一些总结，主要是对原书中几段代码的解释说明，在读代码中记录知识点，技术</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 对象模型</title>
      <link>https://ysw1912.github.io/post/cc&#43;&#43;/cpp_object_model/</link>
      <pubDate>Thu, 12 Jul 2018 16:00:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/cc&#43;&#43;/cpp_object_model/</guid>
      <description>&amp;emsp;&amp;emsp;本文是看《深度探索 C++ 对象模型》这本书后的一些总结，并非单纯的摘录，而是结合相关博客和自己的理解所写的心得，有一定参考</description>
    </item>
    
    <item>
      <title>stringstream 类型转换</title>
      <link>https://ysw1912.github.io/post/cc&#43;&#43;/cpp04/</link>
      <pubDate>Fri, 15 Jun 2018 10:00:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/cc&#43;&#43;/cpp04/</guid>
      <description>sprintf() &amp;emsp;&amp;emsp;使用stdio.h的sprintf()可以实现数据的类型转换。 1 2 3 4 5 6 char s[5]; memset(s, 0, sizeof(s)); double d = 3.14; sprintf(s, &amp;#34;%f&amp;#34;, d); cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; endl; // print &amp;#34;3.140000&amp;#34;</description>
    </item>
    
    <item>
      <title>内存问题</title>
      <link>https://ysw1912.github.io/post/cc&#43;&#43;/cpp03/</link>
      <pubDate>Thu, 14 Jun 2018 19:45:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/cc&#43;&#43;/cpp03/</guid>
      <description>【转】应用 Valgrind 发现 Linux 程序的内存问题</description>
    </item>
    
    <item>
      <title>链表排序</title>
      <link>https://ysw1912.github.io/post/cc&#43;&#43;/stl02/</link>
      <pubDate>Thu, 14 Jun 2018 18:00:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/cc&#43;&#43;/stl02/</guid>
      <description>链表排序 &amp;emsp;&amp;emsp;在学习STL中的双向链表std::list时，被它的sort()函数惊艳到，发现《STL源码剖析》一书中对该</description>
    </item>
    
    <item>
      <title>红黑树删除节点</title>
      <link>https://ysw1912.github.io/post/cc&#43;&#43;/rbtree_delete/</link>
      <pubDate>Thu, 07 Jun 2018 10:00:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/cc&#43;&#43;/rbtree_delete/</guid>
      <description>红黑树 &amp;ensp;&amp;ensp;红黑树是一种自平衡的二叉查找树（BST），可在O(logN)时间内完成查找、插入、删除等操作。 &amp;ensp;&amp;e</description>
    </item>
    
    <item>
      <title>Effective C&#43;&#43; 笔记</title>
      <link>https://ysw1912.github.io/post/cc&#43;&#43;/effective_cpp_note/</link>
      <pubDate>Tue, 05 Jun 2018 10:00:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/cc&#43;&#43;/effective_cpp_note/</guid>
      <description>条款2：尽量以 const，enum，inline 替换 #define 对于单纯常量，尽量以const对象或enum替换#define。 enum是一个右值，无</description>
    </item>
    
    <item>
      <title>const和static</title>
      <link>https://ysw1912.github.io/post/cc&#43;&#43;/cpp01/</link>
      <pubDate>Tue, 05 Jun 2018 10:00:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/cc&#43;&#43;/cpp01/</guid>
      <description>pointer与const 1 2 3 4 5 6 char s[] = &amp;#34;Hello&amp;#34;; const char* p = s; // 非const指针，const数据（底层const：星号左边） char const* p = s; // 同上，co</description>
    </item>
    
    <item>
      <title>Win10&#43;VS2017配置CUDA项目</title>
      <link>https://ysw1912.github.io/post/cc&#43;&#43;/cuda01/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ysw1912.github.io/post/cc&#43;&#43;/cuda01/</guid>
      <description>一、新建项目 打开 VS2017 → 新建项目 → Win32控制台应用程序 → “空项目” 二、调整配置管理器平台类型 右键项目 → 属性 → 配置管理器 → 全改为“x64” 三、</description>
    </item>
    
    <item>
      <title>我的花里胡哨的VS2017</title>
      <link>https://ysw1912.github.io/post/ide/vs01/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ysw1912.github.io/post/ide/vs01/</guid>
      <description>&amp;ensp;&amp;ensp;首先放上我的 VS2017 效果图，花里胡哨但十分养眼，无限有利于 C/C++ Coding~~ 一、主题设置 工具 → 扩展和更新 下载插件 Color Theme Editor for Visual Studio 2017 和 MoeIDE 下载方</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://ysw1912.github.io/post/jottings/hello-world/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0800</pubDate>
      
      <guid>https://ysw1912.github.io/post/jottings/hello-world/</guid>
      <description>引言 欢度六一儿童节的同时，一名程序员渣渣开始使用GitHub Blog，发篇博文纪念一波。 曾使用博客园，移植工作进行ing。 希望自己越来越强壮</description>
    </item>
    
  </channel>
</rss>